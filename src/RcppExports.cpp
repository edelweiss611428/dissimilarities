// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// expandDistCpp
NumericVector expandDistCpp(const NumericVector& distA, const NumericMatrix& distBA, const NumericVector& distB, bool diag, bool upper);
RcppExport SEXP _dissimilarities_expandDistCpp(SEXP distASEXP, SEXP distBASEXP, SEXP distBSEXP, SEXP diagSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type distA(distASEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type distBA(distBASEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type distB(distBSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(expandDistCpp(distA, distBA, distB, diag, upper));
    return rcpp_result_gen;
END_RCPP
}
// subsetDist2DistCpp
NumericVector subsetDist2DistCpp(const NumericVector& dist, const IntegerVector& idx, bool diag, bool upper);
RcppExport SEXP _dissimilarities_subsetDist2DistCpp(SEXP distSEXP, SEXP idxSEXP, SEXP diagSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetDist2DistCpp(dist, idx, diag, upper));
    return rcpp_result_gen;
END_RCPP
}
// subsetDist2MatCpp
NumericMatrix subsetDist2MatCpp(const NumericVector& dist, const IntegerVector& idx1, const IntegerVector& idx2);
RcppExport SEXP _dissimilarities_subsetDist2MatCpp(SEXP distSEXP, SEXP idx1SEXP, SEXP idx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx1(idx1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx2(idx2SEXP);
    rcpp_result_gen = Rcpp::wrap(subsetDist2MatCpp(dist, idx1, idx2));
    return rcpp_result_gen;
END_RCPP
}
// subsetColsCpp
NumericMatrix subsetColsCpp(const NumericVector& dist, const IntegerVector& colIdx);
RcppExport SEXP _dissimilarities_subsetColsCpp(SEXP distSEXP, SEXP colIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colIdx(colIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetColsCpp(dist, colIdx));
    return rcpp_result_gen;
END_RCPP
}
// Dist2MatCpp
NumericMatrix Dist2MatCpp(const NumericVector& dist);
RcppExport SEXP _dissimilarities_Dist2MatCpp(SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(Dist2MatCpp(dist));
    return rcpp_result_gen;
END_RCPP
}
// fastDistCpp
NumericVector fastDistCpp(const NumericMatrix& X, std::string method, bool diag, bool upper, int p);
RcppExport SEXP _dissimilarities_fastDistCpp(SEXP XSEXP, SEXP methodSEXP, SEXP diagSEXP, SEXP upperSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(fastDistCpp(X, method, diag, upper, p));
    return rcpp_result_gen;
END_RCPP
}
// fastDistABCpp
NumericMatrix fastDistABCpp(const NumericMatrix& A, const NumericMatrix& B, std::string method, int p);
RcppExport SEXP _dissimilarities_fastDistABCpp(SEXP ASEXP, SEXP BSEXP, SEXP methodSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type B(BSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(fastDistABCpp(A, B, method, p));
    return rcpp_result_gen;
END_RCPP
}
// get1dFrom2dCpp
int get1dFrom2dCpp(int nr, int i, int j);
RcppExport SEXP _dissimilarities_get1dFrom2dCpp(SEXP nrSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(get1dFrom2dCpp(nr, i, j));
    return rcpp_result_gen;
END_RCPP
}
// get2dFrom1dCpp
IntegerMatrix get2dFrom1dCpp(const IntegerVector& idx, int n);
RcppExport SEXP _dissimilarities_get2dFrom1dCpp(SEXP idxSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(get2dFrom1dCpp(idx, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dissimilarities_expandDistCpp", (DL_FUNC) &_dissimilarities_expandDistCpp, 5},
    {"_dissimilarities_subsetDist2DistCpp", (DL_FUNC) &_dissimilarities_subsetDist2DistCpp, 4},
    {"_dissimilarities_subsetDist2MatCpp", (DL_FUNC) &_dissimilarities_subsetDist2MatCpp, 3},
    {"_dissimilarities_subsetColsCpp", (DL_FUNC) &_dissimilarities_subsetColsCpp, 2},
    {"_dissimilarities_Dist2MatCpp", (DL_FUNC) &_dissimilarities_Dist2MatCpp, 1},
    {"_dissimilarities_fastDistCpp", (DL_FUNC) &_dissimilarities_fastDistCpp, 5},
    {"_dissimilarities_fastDistABCpp", (DL_FUNC) &_dissimilarities_fastDistABCpp, 4},
    {"_dissimilarities_get1dFrom2dCpp", (DL_FUNC) &_dissimilarities_get1dFrom2dCpp, 3},
    {"_dissimilarities_get2dFrom1dCpp", (DL_FUNC) &_dissimilarities_get2dFrom1dCpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_dissimilarities(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
